package starknet

import (
	"github.com/hauntedness/giom/internal/eth"
	"github.com/shopspring/decimal"
)

// Generated by https://quicktype.io

type GetTransactionsResponse struct {
	NextURL string  `json:"next_url"`
	Data    []Datum `json:"data"`
}

type Datum struct {
	TransactionHash        string                 `json:"transaction_hash"`
	BlockHash              string                 `json:"block_hash"`
	BlockNumber            int64                  `json:"block_number"`
	TransactionIndex       int64                  `json:"transaction_index"`
	TransactionStatus      TransactionStatus      `json:"transaction_status"`
	TransactionType        TransactionType        `json:"transaction_type"`
	Version                int64                  `json:"version"`
	Signature              []string               `json:"signature"`
	MaxFee                 *decimal.Decimal       `json:"max_fee"`
	ActualFee              *decimal.Decimal       `json:"actual_fee"`
	Nonce                  *string                `json:"nonce"`
	ContractAddress        *string                `json:"contract_address"`
	EntryPointSelector     *string                `json:"entry_point_selector"`
	EntryPointType         interface{}            `json:"entry_point_type"`
	Calldata               []string               `json:"calldata"`
	ClassHash              *string                `json:"class_hash"`
	SenderAddress          *string                `json:"sender_address"`
	ConstructorCalldata    []string               `json:"constructor_calldata"`
	ContractAddressSalt    *string                `json:"contract_address_salt"`
	Timestamp              int64                  `json:"timestamp"`
	EntryPointSelectorName EntryPointSelectorName `json:"entry_point_selector_name"`
	NumberOfEvents         int64                  `json:"number_of_events"`
	AccountCalls           []AccountCall          `json:"account_calls"`
}

func (d Datum) GetActualGasInEth() decimal.Decimal {
	if d.ActualFee == nil || d.ActualFee.Equal(decimal.Zero) {
		return decimal.Zero
	}
	return eth.WeiToEther(*d.ActualFee)
}

type AccountCall struct {
	BlockHash       string         `json:"block_hash"`
	BlockNumber     int64          `json:"block_number"`
	TransactionHash string         `json:"transaction_hash"`
	CallerAddress   string         `json:"caller_address"`
	ContractAddress string         `json:"contract_address"`
	Calldata        []string       `json:"calldata"`
	Result          []string       `json:"result"`
	Timestamp       int64          `json:"timestamp"`
	CallType        CallType       `json:"call_type"`
	ClassHash       string         `json:"class_hash"`
	Selector        string         `json:"selector"`
	EntryPointType  EntryPointType `json:"entry_point_type"`
	SelectorName    string         `json:"selector_name"`
}

type CallType string

const (
	Call CallType = "CALL"
)

type EntryPointType string

const (
	Constructor             EntryPointType = "CONSTRUCTOR"
	EntryPointTypeL1HANDLER EntryPointType = "L1_HANDLER"
	External                EntryPointType = "EXTERNAL"
)

type EntryPointSelectorName string

const (
	EntryPointSelectorNameConstructor EntryPointSelectorName = "constructor"
	Execute                           EntryPointSelectorName = "__execute__"
	HandleDeposit                     EntryPointSelectorName = "handle_deposit"
)

type TransactionStatus string

const (
	AcceptedOnL2 TransactionStatus = "ACCEPTED_ON_L2"
)

type TransactionType string

const (
	DeployAccount            TransactionType = "DEPLOY_ACCOUNT"
	InvokeFunction           TransactionType = "INVOKE_FUNCTION"
	TransactionTypeL1HANDLER TransactionType = "L1_HANDLER"
)
